백준 채점이 막힌 상태라서 코드만 먼저 올릴게요!(이걸 보시는 분들은 저처럼 장난삼아 이메일 하나로 아이디 여러개 생성하지 마세요 흐흑....)
나중에 일괄 수정하도록 하겠습니다
#1260번 DFS와 BFS﻿
#include <iostream>

#include <stdio.h>

#include <queue>

#include <algorithm>

using namespace std;

int arr[1001][1001];

int visit[1001];

int N, M, V;

int u, v;

void dfs(int x)

{

int i = 0;

visit[x] = 1;

printf("%d ", x);

for (i = 1; i <= N; i++)

if (arr[x][i] == 1 && visit[i] == 0)

{


dfs(i);

}

if (i == N) return;

}

void bfs(int x)

{

queue<int> q;

int i = 0;

q.push(x);

while (!q.empty())

{

int next = q.front();

visit[next] = 1;

printf("%d ", next);

q.pop();

for (i = 1; i <= N; i++)

if (arr[next][i] == 1 && visit[i] == 0)

{

q.push(i);

visit[i] = 1;

}

}

}

int main()

{

scanf("%d %d %d", &N, &M, &V);

for (int i = 0; i < M; i++)

{

scanf("%d %d", &u, &v);

arr[u][v] = 1;

arr[v][u] = 1;

}

dfs(V);

printf("\n");

memset(visit, 0, sizeof(visit));

bfs(V);

}

﻿#2178번 미로탐색
 ﻿
#include<cstdio>

#include<iostream>

#include<queue>

using namespace std;


int N;

int M;


bool map[100][100];

int check[100][100];

int dir[4][2] = {{1,0}, {-1,0}, {0,1}, {0,-1}};


bool isInside(int a, int b){

return (a >= 0 && a < N) && (b >=0 && b < M);

}


int bfs(){

int y=0, x=0;


queue<pair<int, int> > q;

q.push(pair<int, int>(y,x));

check[y][x] = 1;

while(!q.empty()){

y = q.front().first;

x = q.front().second;

q.pop();

for(int i=0; i<4; i++){

int next_y = y + dir[i][0];

int next_x = x + dir[i][1];

if(isInside(next_y, next_x) && check[next_y][next_x]==0 && map[next_y][next_x]){

check[next_y][next_x] = check[y][x] +1;

q.push(pair<int, int>(next_y, next_x));

}

}

}

return check[n-1][m-1];

}



int main(void){

scanf("%d %d",&N,&M);

for(int i=0; i<N; i++){

for(int j=0; j<M ;j++) {

int b;

scanf("%1d", &b);

if(b==1){

map[i][j] = true;

}

}

}

bfs();

printf("%d\n", num);

return 0;

}

﻿#4963번 섬의 갯구
 ﻿
#include<iostream>

using namespace std;

int map[51][51] = {0,};

int w, h;

int cnt;

int dy[8] = {-1,0,1,-1,1,-1,0,1};

int dx[8] = {-1,-1,-1,0,0,1,1,1};

void dfs(int x, int y) {

map[x][y] = 2;

for (int i = 0; i < 8; i++) {

if ( (x+dx[i]<0 || x+dx[i]>=h) ||

(y+dy[i]<0 || y+dy[i]>=w)) {

continue;

}

else {

if (map[x + dx[i]][y + dy[i]]==1) {

dfs(x + dx[i],y + dy[i]);

}

}

}

}

int main(void) {

while (1) {

cnt = 0;

cin >> w >> h;

if (w==0 && h==0) {

break;

}

for (int j = 0; j < h; j++) {

for (int k = 0; k < w; k++) {

cin >> map[j][k];

}

}

for (int j = 0; j < h; j++) {

for (int k = 0; k < w; k++) {

if (map[j][k]==1) {

cnt++;

dfs(j,k);

}

}

}

cout << cnt << endl;

}

return 0;

}


#단지번호 붙이기
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
#define MAX 25
 
int N;
int map[MAX][MAX];
bool visited[MAX][MAX];
int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,1,-1};
int cnt;
 
vector<int> cnt;
 
void dfs(int x, int y){
    cnt++;
    visited[x][y] = true;
 
    for(int i = 0; i < 4; i++){
        int nx = x + dx[i];
        int ny = y + dy[i];
        if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
        if(map[nx][ny] == 1 && visited[nx][ny] == false)
            dfs(nx, ny);
    }
}
 
 
int main(int argc, const char * argv[]) {
    string line;
    cin >> N;
    
    for(int i = 0; i < N; i++){
        cin >> line;
        for(int j = 0; j < N; j++){
            map[i][j] = line[j] - '0';
        }
    }
    
    for(int i = 0; i < N; i++){
        for(int j = 0; j < N; j++){
            if(map[i][j] == 1 && visited[i][j] == false){
                cnt = 0;
                dfs(i, j);
                cnt.push_back(cnt);
            }
        }
    }
    
    sort(cnt.begin(), cnt.end());
    cout << cnt.size() << '\n';
    for(int i = 0; i < cnt.size(); i++){
        cout << cnt[i] << '\n';
     }
    
    return 0;
}
 
#2468번 안전영역 
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<algorithm>

using namespace std;

#define MAX 101

int N;
int min = MAX;
int max = 0;
int map[MAX][MAX];
bool visit[MAX][MAX] = { false, };

int dx[4] = { 0, 0, 1, -1 };
int dy[4] = { 1, -1, 0, 0 };

void DFS(int x, int y, int height) {
	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx < 0 || ny < 0 || nx >= N || ny >= N) continue;
		if (map[nx][ny] <= height || visit[nx][ny]) continue;

		visit[nx][ny] = true;
		DFS(nx, ny, height);
	}
}
int main() {
	int result = 1;
	init();
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
			min = min(min_value, map[i][j]);
			max = max(max_value, map[i][j]);
		}
	}

	for (int i = min; i < max; i++) {
		int cnt = 0;
		memset(visit, false, sizeof(visit));
		
		for (int j = 0; j < N; j++) {
			for (int k = 0; k < N; k++) {
				if (map[j][k] > i && !visit[j][k]) {
					visit[j][k] = true;
					cnt++;
					DFS(j, k, i);
				}
			}
		}
		result = max(result, cnt);
	}
	cout << result;
	return 0;
}
 
